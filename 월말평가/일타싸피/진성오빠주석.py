import math       # 수학적 계산을 위한 math 라이브러리 임포트

# ===================기본 정보==============================================================
gamma.order       # 1이면 내 차례, 0이면 상대 차례를 나타냅니다.
Ball_r = 5.73 / 2 # 공의 반지름을 계산 (공의 직경이 5.73이므로 반지름은 2로 나눈 값)
W = 254           # 당구대의 세로 길이 (단위는 아마도 cm 또는 mm)
H = 127           # 당구대의 가로 길이 (단위는 W와 동일)
HOLES = [[0, 0], [127, 0], [254, 0], [0, 127], [127, 127], [254, 127]] 
# 당구대 6개의 홀의 위치 좌표 (왼쪽 아래, 중앙 아래, 오른쪽 아래, 왼쪽 위, 중앙 위, 오른쪽 위)

# ===================함수 만들기============================================================

def shot():
    # 내 공(A)과 목표 공(B)의 위치를 gameData에서 불러와 각각의 변수에 저장
    A = (a_1, a_2) = (gameData.balls[0][0], gameData.balls[0][1]) # 내 공의 위치 (x, y 좌표)
    B = (b_1, b_2) = (gameData.balls[1][0], gameData.balls[1][1]) # 내가 맞춰야 할 목표 공의 위치 (x, y 좌표)
    
    # 목적지(타겟 홀) 결정 (하드코딩된 조건문을 통해 결정)
    target = None
    if (a_1 != b_1) and (a_2 != b_2): # 내 공과 목표 공의 x좌표와 y좌표가 모두 다른 경우
        if (a_1 < b_1) and (a_2 < b_2): 
            target = HOLES[5] # 내 공이 목표 공의 왼쪽 아래에 있을 경우 오른쪽 위 홀 선택
        elif (a_1 < b_1) and (a_2 > b_2): 
            target = HOLES[2] # 내 공이 목표 공의 왼쪽 위에 있을 경우 오른쪽 아래 홀 선택
        elif (a_1 > b_1) and (a_2 < b_2): 
            target = HOLES[1] # 내 공이 목표 공의 오른쪽 아래에 있을 경우 중앙 아래 홀 선택
        elif (a_1 > b_1) and (a_2 > b_2): 
            target = HOLES[0] # 내 공이 목표 공의 오른쪽 위에 있을 경우 왼쪽 아래 홀 선택
                    
    elif a_1 == b_1 == 127: # 내 공과 목표 공의 x좌표가 모두 중앙(127)인 경우
        if a_2 < b_2: 
            target = HOLES[4] # 내 공이 목표 공의 아래쪽에 있을 경우 중앙 위 홀 선택
        else: 
            target = HOLES[3] # 내 공이 목표 공의 위쪽에 있을 경우 왼쪽 위 홀 선택
    
    # 내가 목표 공을 맞추고 싶은 위치 계산 (목표 공과 타겟 홀의 방향으로 공의 반지름 만큼 떨어진 위치)
    dx, dy = target[0] - B[0], target[1] - B[1] # 목표 공과 타겟 홀 사이의 x, y 좌표 차이 계산
    dist = math.sqrt(dx**2 + dy**2) # 두 점 사이의 거리 계산 (피타고라스 정리)
    New_B = (b_1 - Ball_r * dx / dist, b_2 - Ball_r * dy / dist) 
    # 목표 공의 중심에서 타겟 홀 방향으로 공의 반지름 거리만큼 이동한 점 (New_B) 계산
    
    # 내 공(A)과 내가 목표로 하는 위치(New_B) 사이의 각도 계산
    angle = math.atan2(New_B[1] - A[1], New_B[0] - A[0])

    # 힘은 임의로 100으로 설정 (이 부분은 실제 게임 상황에서 조정 필요)
    power = 100
    
    conn.send(angle, power) # 계산된 각도와 힘을 사용하여 공을 치라는 명령을 보냄
    return

# 게임 순서가 내 차례(선공)인 경우 shot 함수를 호출하여 공을 칩니다.
if gamma.order == 1: 
    shot() 
